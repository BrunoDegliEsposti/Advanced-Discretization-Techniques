% PROGRAMMING EXERCISE 8: A CONVECTION-DOMINATED PROBLEM WITH FVM% Bruno Degli Esposti, Xingyu Xu% 17/12/19 - 07/01/20% Code tested in MATLAB only%Mesh used:%% (Omega0)  |   (Omega1)  |   (Omega2)  |  ...  |(Omega(N-1))|  (OmegaN)   |   (Omega(N+1))    %    | ---- , ---- | ---- , ---- | ---- ,  ...        | ---- , ---- | ---- , ---- |%   x0=0           x1           x2                  x(N-1)         xN          x(N+1)=1   exercise = 'a';% Comment on the results (point a):% If c > 0, the exact solution is the characteristic function% on the interval [0,ct]. Instead, we observe a smooth transition% from 1 to 0, which means that our simulation introduces% unwanted numerical diffusion.% Diffusive effects come from the space discretization (full upwinding% is at fault) and temporal discretization (implicit Euler).% Hence, to improve the sharpness of our solution, it's necessary% to increase N and decrease DT at the same rate (only one% of the two is not enough).% DT = T/5000 and N = 1000 give satisfactory results.% Comment on the results (point b):% If c > 0, the exact solution is exp(-5x) times the characteristic% function of the interval [0,ct].% This time we also get unwanted numerical diffusion, but its effect% is dampened by the reactive term (the solution almost vanishes near x=1).% Hence, DT = T/250 and N = 50 already give satisfactory results.% Comment on the results (point c):% If k is small (e.g. 1e-4) and/or c is large (e.g. 1e+4),% then the numeric solution will not look smooth anymore,% but it will still evolve correctly over time from a qualitative% point of view. Increasing N mitigates the problem.% Comment on the results (point d):% Nice Christmas tree ;-)if (exercise == 'a')    T = 5;    DT = T/5000;    N = 1000;    u = zeros(N+2, floor(T/DT)+1);    x = linspace(0,1,N+2)'; % define mesh    k = 0;            % diffusion coefficient    c = 0.2;          % advection coefficient    r = 0;            % reaction coefficient    f = @(t,x) zeros(size(x));    r_upwind = (c>0); % which side is the upwind side?    x_star = (c<0);    if c > 0        BC_idx = 1;   % boundary condition index    else        BC_idx = N+2;    end    g = @(t,x_star) 1;    u(BC_idx,1) = g(0,x_star); % initial condition has to satisfy the BCelseif (exercise == 'b')    T = 5;    DT = T/250;    N = 50;    u = zeros(N+2, floor(T/DT)+1);    x = linspace(0,1,N+2)'; % define mesh    k = 0;            % diffusion coefficient    c = 0.2;          % advection coefficient    r = 1;            % reaction coefficient    f = @(t,x) zeros(size(x));    r_upwind = (c>0); % which side is the upwind side?    x_star = (c<0);    if c > 0        BC_idx = 1;   % boundary condition index    else        BC_idx = N+2;    end    g = @(t,x_star) 1;    u(BC_idx,1) = g(0,x_star); % initial condition has to satisfy the BCelseif (exercise == 'c')    T = 5;    DT = T/500;    N = 100;    u = zeros(N+2, floor(T/DT)+1);    x = [0;sort(rand(N,1));1]; % define unstructured mesh    k = 1;            % diffusion coefficient    c = 1;            % advection coefficient    r = 1;            % reaction coefficient    f = @(t,x) cos(t)*sin(2*pi*x)+...        (4*pi^2*k+r)*sin(t)*sin(2*pi*x)+2*pi*c*sin(t)*cos(2*pi*x);    r_upwind = (c>0); % which side is the upwind side?    g = @(t,x_star) 0;    u_ex = @(t,x) sin(t)*sin(2*pi*x);elseif (exercise == 'd')    T = 5;    DT = T/1000;    N = 5000;    u = zeros(N+2, floor(T/DT)+1);    x = linspace(0,1,N+2)'; % define mesh    k = 0;            % diffusion coefficient    c = 0.2;          % advection coefficient    r = 0.1;          % reaction coefficient    f = @(t,x) zeros(size(x));    r_upwind = (c>0); % which side is the upwind side?    x_star = (c<0);    if c > 0        BC_idx = 1;   % boundary condition index    else        BC_idx = N+2;    end    g = @(t,x_star) t*((1.05*t-floor(1.05*t))^3+0.2);    u(BC_idx,1) = g(0,x_star); % initial condition has to satisfy the BCend% Construct system matrices M, A, B, R% The full system should take the form:% M*(U(n+1) - U(n)) + A*U(n+1) + B*U(n+1) + R*U(n+1) = F(n+1)xhalves = 0.5*(x(1:end-1)+x(2:end));h = [xhalves(1); diff(xhalves); 1-xhalves(end)];% Matrix for the time-derivativeM = sparse(N+2,N+2);for i = 1:N+2    M(i,i) = h(i)/DT;end% Matrix for the diffusive partA = sparse(N+2,N+2);% Rows 1 and N+2 don't matter, because k != 0 implies% that we get Dirichlet BC on both endsfor i = 2:N+1    A(i,i-1) = -k/(x(i)-x(i-1));    A(i,i) = k/(x(i)-x(i-1)) + k/(x(i+1)-x(i));    A(i,i+1) = -k/(x(i+1)-x(i));end% Matrix for the convective partB = sparse(N+2,N+2);% Rows 1 and N+2 matter only if k == 0. In any case, one of% the two rows will be overwritten by the Dirichlet BC.B(1,1) = -c;B(1,2) = c;for i = 2:N+1    B(i,i-1) = -c*r_upwind;    B(i,i) = c*r_upwind - c*(1-r_upwind);    B(i,i+1) = c*(1-r_upwind);endB(N+2,N+1) = -c;B(N+2,N+2) = c;% Matrix for the reactive partR = sparse(N+2,N+2);for i = 1:N+2    R(i,i) = r*h(i);endt = 0;for i = 1:(T/DT)    % Inside the loop, u(:,i) is u at time t    % and u(:,i+1) is u at time t+DT        % Construct RHS    F = h.*f(t+DT,x);    rhs = M*u(:,i) + F;        % Full system matrix    FS = A+M+B+R;     % Update system with Dirichlet values    if k == 0        FS(BC_idx,:) = 0;        FS(BC_idx,BC_idx) = 1;        rhs(BC_idx) = g(t+DT,x_star);    else        FS(1,:) = 0;        FS(1,1) = 1;        rhs(1) = g(t+DT,0);        FS(end,:) = 0;        FS(end,end) = 1;        rhs(end) = g(t+DT,1);    end      % Calculate u at time t+DT    u(:,i+1) = FS\rhs;        t = t + DT;endif(exercise == 'a')    for i = round(linspace(0,size(u,2)-1,120)) % show 120 frames        tic;        plot(x,u(:,i+1)), ylim([0,1.5]);        title(['uh at t = ', num2str(i*DT)])        drawnow();        pause(1/30-toc); % at a speed around 30FPS    endelseif(exercise == 'b')    for i = round(linspace(0,size(u,2)-1,120))        tic;        plot(x,u(:,i+1)), ylim([0,1.5]);        title(['uh at t = ', num2str(i*DT)])        drawnow();        pause(1/30-toc);    endelseif(exercise == 'c')    for i = round(linspace(0,size(u,2)-1,120))        tic;        subplot(1,2,1),plot(x,u_ex(i*DT,x)), ylim([-1.5,1.5]);        title(['u_ex at t = ', num2str(i*DT)])        subplot(1,2,2),plot(x,u(:,i+1)), ylim([-1.5,1.5]);        title(['uh at t = ', num2str(i*DT)])        drawnow();        pause(1/30-toc);    endelseif(exercise == 'd')    for i = round(linspace(0,size(u,2)-1,120))        tic;        plot(u(:,i+1),x,'color',[0.4660 0.6740 0.1880],'linewidth',2), xlim([-5,5]);        hold on        plot(-u(:,i+1),x,'color', [0.4660 0.6740 0.1880],'linewidth',2),xlim([-5,5]);        hold off        title(['Happy holidays!'])        drawnow();        pause(1/30-toc);    endend